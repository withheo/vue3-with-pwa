

// 해당 소재는 serviceWorker 필요없이 동작가능
// HTTPS site 에서만 동작 (localhost 예외인가?)

const useCredential = () => {

  const onFingerPrint = () => {
    if (!window.PublicKeyCredential) {
      /* Client not capable. Handle error. */
    }

    const publicKey: any = {
      // The challenge is produced by the server; see the Security Considerations
      challenge: new Uint8Array([
        21,
        31,
        105 /* 29 more random bytes generated by the server */
      ]),

      // Relying Party:
      rp: {
        name: "ACME Corporation"
      },

      // User:
      user: {
        id: Uint8Array.from(
          window.atob("MIIBkzCCATigAwIBAjCCAZMwggE4oAMCAQIwggGTMII="),
          c => c.charCodeAt(0)
        ),
        name: "mynet81@gmail.com",
        displayName: "Alex P. Müller"
      },

      // This Relying Party will accept either an ES256 or RS256 credential, but
      // prefers an ES256 credential.
      pubKeyCredParams: [
        {
          type: "public-key",
          alg: -7 // "ES256" as registered in the IANA COSE Algorithms registry
        },
        {
          type: "public-key",
          alg: -257 // Value registered by this specification for "RS256"
        }
      ],

      authenticatorSelection: {
        // Try to use UV if possible. This is also the default.
        userVerification: "preferred"
      },

      timeout: 360000, // 6 minutes
      excludeCredentials: [], // No exclude list of PKCredDescriptors
      extensions: { loc: true } // Include location information
      // in attestation
    };

    // Note: The following call will cause the authenticator to display UI.
    navigator.credentials
      .create({ publicKey })
      // eslint-disable-next-line no-unused-vars
      .then((newCredentialInfo: any) => {
        // Send new credential info to server for verification and registration.
        // eslint-disable-next-line no-unused-vars, no-undef
        
        // eslint-disable-next-line no-undef
        console.log("save", newCredentialInfo);
        //state.keyStr = newCredentialInfo;
      })
      .catch(() => {
        // No acceptable authenticator or user refused consent. Handle appropriately.

        console.log("fail");
        //state.keyStr = " Fail";
      });
  }

  return {
    onFingerPrint,
  }
}


export default useCredential;