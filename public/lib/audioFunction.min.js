var constraints = {
    audio: true,
    video: false
}, audioData = [], recorder = null, div_visualizer_canvas_id, div_visualizer_canvas_ver, div_timer_id, div_audio_player, div_audio_button, div_audio_log, tss = 0, tm = 0, ts = 0, tsv, rTimeLimit = recordTimeLimit, TrecordTimeLimitUse = false, TrecordTimeLimit = 5, timerIntervalId = null, vrbrowserName = function() {
    var b = navigator.userAgent.toLowerCase();
    if (-1 != b.indexOf("chrome")) {
        return "Chrome";
    }
    if (-1 != b.indexOf("opera")) {
        return "Opera";
    }
    if (-1 != b.indexOf("staroffice")) {
        return "Star Office";
    }
    if (-1 != b.indexOf("webtv")) {
        return "WebTV";
    }
    if (-1 != b.indexOf("beonex")) {
        return "Beonex";
    }
    if (-1 != b.indexOf("chimera")) {
        return "Chimera";
    }
    if (-1 != b.indexOf("netpositive")) {
        return "NetPositive";
    }
    if (-1 != b.indexOf("phoenix")) {
        return "Phoenix";
    }
    if (-1 != b.indexOf("firefox")) {
        return "Firefox";
    }
    if (-1 != b.indexOf("safari")) {
        return "Safari";
    }
    if (-1 != b.indexOf("skipstone")) {
        return "SkipStone";
    }
    if (-1 != b.indexOf("msie")) {
        return "Internet Explorer";
    }
    if (-1 != b.indexOf("netscape")) {
        return "Netscape";
    }
    if (-1 != b.indexOf("mozilla/5.0")) {
        return "Mozilla";
    }
};

console.log("mp3libUrl ", AudioRecorder, mp3libUrl)
AudioRecorder.preload(mp3libUrl);
function setupRecorder(b, a, e, f, g, c) {
    console.log(2);
    var l = vrbrowserName();
    "Internet Explorer" != l ? (audioData = [],
    recorder = new AudioRecorder({
        recordingGain: 1,
        encoderBitRate: 128,
        streaming: true,
        streamBufferSize: 50000,
        constraints: {
            channelCount: 1,
            autoGainControl: true,
            echoCancellation: true,
            noiseSuppression: true
        },
        forceScriptProcessor: false
    }),
    console.error("recorder ", recorder),
    recorder.ondataavailable = function(d) {
        console.log("ondataavailable : ",d);
        audioData.push(d);
    }
    ,
    navigator.mediaDevices.getUserMedia(constraints).then(function(d) {
        "v1" == a && 0 < $("#" + b).length && _visualize(b, d);
        "v2" == a && 0 < $("#" + b).length && _visualize2(b, d);
    })['catch'](function(d) {
        _startRecording_error();
    }),
    recorder.onstart = function() {
        div_visualizer_canvas_id = b;
        div_visualizer_canvas_ver = a;
        div_timer_id = e;
        div_audio_player = f;
        div_audio_button = g;
        div_audio_log = c;
        viewLog(startMessage, "", div_audio_log);
        timerIntervalId = setInterval(function() {
            tss = recorder.time / 1000;
            tm = Math.floor(tss / 60);
            ts = (tss % 60).toFixed(2);
            tsv = 10 > ts ? tm + ":0" + ts : tm + ":" + ts;
            0 < $("#" + e).length && (document.getElementById(e).innerHTML = tsv);
            1 == TrecordTimeLimitUse ? recorder.time / 1000 >= TrecordTimeLimit && _stopRecording(div_audio_log) : recorder.time / 1000 >= rTimeLimit && _stopRecording(div_audio_log);
        }, 100);
    }
    ,
    recorder.onstop = function() {
        console.error("onstop" , audioData)
        viewLog(endMessage, "", div_audio_log);
        var d = new Blob(audioData,{
            type: "audio/mpeg"
        })
          , m = URL.createObjectURL(d);
        viewRecording(m, d, div_audio_player, div_audio_button);
        audioData = [];
        div_audio_log = div_audio_button = div_audio_player = div_timer_id = div_visualizer_canvas_ver = div_visualizer_canvas_id = "";
        eventStopRecording(e, f, g, c);
    }
    ,
    recorder.onerror = function(d) {
        console.log(d);
        viewLog("Recording error " + String(d), "", c);
    }
    ) : "Internet Explorer" == l && alert(chkbrowsermsg);

    // console.error("recorder ", recorder);
}
function _startRecording(b, a, e, f, g, c) {
    console.log("c :", c);
    if (div_audio_log && c != div_audio_log) {
        alert(preRecordingCheckErrorMsg);
    } else {
        var l = Stream_Object_Rec();
        "done_fix" == 'done_fix' ? ($("#" + c).empty(),
        $("#" + g).empty(),
        $("#" + f).empty(),
        setupRecorder(b, a, e, f, g, c),
        viewLog(readyMessage, "", c),
        recorder.start()) : l.done(function(d) {
            d = d.lckresult;
            "done" == d ? ($("#" + c).empty(),
            $("#" + g).empty(),
            $("#" + f).empty(),
            setupRecorder(b, a, e, f, g, c),
            viewLog(readyMessage, "", c),
            recorder.start()) : alert(d);
        });
    }
}
function _stopRecording(b) {
    // alert(1);
    audioData && b == div_audio_log ? (console.log("Stop Recording"),
    viewLog(stopMessage, "", b),
    clearInterval(timerIntervalId),
    recorder.stop()) : alert(recordingCheckErrorMsg);
}
function _pauseRecording(b) {
    audioData && b == div_audio_log ? (console.log("Pause Recording"),
    viewLog(pauseMessage, "", b),
    recorder.pause()) : alert(recordingCheckErrorMsg);
}
function _resumeRecording(b) {
    audioData && b == div_audio_log ? (console.log("Resume Recording"),
    viewLog(resumeMessage, "", b),
    recorder.resume()) : alert(recordingCheckErrorMsg);
}
function _visualize(b, a) {
    if (0 < $("#" + b).length) {
        var e = function() {
            var q = g.width
              , u = g.height;
            requestAnimationFrame(e);
            d.getByteTimeDomainData(t);
            c.fillStyle = visualizerV1BackColor;
            c.fillRect(0, 0, q, u);
            c.lineWidth = visualizerV1lineWidth;
            c.strokeStyle = visualizerV1LineColor;
            c.beginPath();
            q = 1 * q / m;
            for (var h = 0, r = 0; r < m; r++) {
                var k = t[r] / 128 * u / 2;
                0 === r ? c.moveTo(h, k) : c.lineTo(h, k);
                h += q;
            }
            c.lineTo(g.width, g.height / 2);
            c.stroke();
        }
          , f = new AudioContext
          , g = document.getElementById(b)
          , c = g.getContext("2d")
          , l = f.createMediaStreamSource(a)
          , d = f.createAnalyser();
        d.fftSize = 2048;
        var m = d.frequencyBinCount
          , t = new Uint8Array(m);
        l.connect(d);
        e();
    }
}
function _visualize2(b, a) {
    if (0 < $("#" + b).length) {
        var e = new AudioContext
          , f = e.createMediaStreamSource(a)
          , g = e.createAnalyser();
        g.fftSize = 2048;
        f.connect(g);
        var c = g.frequencyBinCount
          , l = new Uint8Array(c);
        e = document.getElementById(b);
        e.width = window.innerWidth;
        e.height = window.innerHeight;
        var d = e.getContext("2d")
          , m = e.width
          , t = e.height;
        d.clearRect(0, 0, m, t);
        var q = function() {
            window.requestAnimationFrame(q);
            g.getByteFrequencyData(l);
            d.fillStyle = visualizerV2BackgroundColor;
            d.fillRect(0, 0, m, t);
            for (var u = m / c * 2.5, h, r = 0, k = 0; k < c; k++) {
                h = l[k];
                if ("a" == $.trim(visualizerV2BarColor)) {
                    var v = h + k / c * 25
                      , n = k / c * 45
                      , p = 151;
                    d.fillStyle = "rgb(" + v + "," + n + "," + p + ")";
                } else {
                    "b" == $.trim(visualizerV2BarColor) ? (n = 39,
                    p = 45,
                    d.fillStyle = "rgb(" + (h + 100) + "," + n + "," + p + ")") : "c" == $.trim(visualizerV2BarColor) ? (n = 175,
                    p = 97,
                    d.fillStyle = "rgb(" + (h + 100) + "," + n + "," + p + ")") : "d" == $.trim(visualizerV2BarColor) ? (v = h + k / c * 25,
                    p = n = 45,
                    d.fillStyle = "rgb(" + v + "," + n + "," + p + ")") : "" == $.trim(visualizerV2BarColor) ? (v = h + k / c * 25,
                    n = k / c * 45,
                    p = 151,
                    d.fillStyle = "rgb(" + v + "," + n + "," + p + ")") : "" != $.trim(visualizerV2BarColor) && (d.fillStyle = $.trim(visualizerV2BarColor));
                }
                d.fillRect(r, t - h * visualizerV2Sensor, u, h * visualizerV2Sensor);
                r += u + 3;
            }
        };
        q();
    } else {
        console.log("Not using Visualizer");
    }
}
var txt1 = "error101_deny_license"
  , txt2 = "error102_no_license"
  , txt3 = "error103_access_license"
  , txt4 = "error104_process_license"
  , txt5 = "error105_error_license"
  , krlics = KVR_LICENSE_KEY;
function Stream_Object_Rec() {
    var b = Stream_Object_App("a"), a, e;
    e = $.ajax({
        type: "get",
        url: 'http://localhost:8080',
        // data: {
        //     objectRrequest: 'www.kiwisoft.kr',
        //     objectXrequest: krlics
        // },
        dataType: "json",
        async: true,
        success: function(f) {
            //a = f.lckresult;
            a = 'done';            
            e = "done" == a ? a : "deny" == a ? txt1 : "error_not" == a ? txt2 : "error_access" == a ? txt3 : "error_etc" == a ? txt4 : Stream_Object_Rec2();
        },
        error: function(f, g, c) {
           // alert(1);
            //console.log(f.responseText);
            //e = Stream_Object_Rec2();
        }
    });

    console.log("E: ", e);

    return e;

}
function Stream_Object_Rec2() {
    console.error(1);
    var b = Stream_Object_App("b"), a, e;
    return e = $.ajax({
        type: "get",
        url: 'http:/localhost:8080',
        data: {
            objectRrequest: 'www.kiwisoft.kr',
            objectXrequest: krlics
        },
        dataType: "json",
        async: true,
        success: function(f) {
            // a = f.lckresult;
            a = 'done';
            e = "done" == a ? a : "deny" == a ? txt1 : "error_not" == a ? txt2 : "error_access" == a ? txt3 : "error_etc" == a ? txt4 : txt5;
        },
        error: function(f, g, c) {
            console.log(2);
            console.log(f.responseText);
        }
    });
}
function Stream_Object_App(b) {
    var a = "abcdefghijklmnopqrstuvwxyz0123456789-".split("");
    if ("a" == b) {
        b = a[22];
        var e = a[22]
          , f = a[22]
          , g = a[10]
          , c = a[8]
          , l = a[22]
          , d = a[8]
          , m = a[18]
          , t = a[14]
          , q = a[5]
          , u = a[19]
          , h = a[10]
          , r = a[17]
          , k = a[7]
          , v = a[29]
          , n = a[10]
          , p = a[11]
          , w = a[2]
          , x = a[3]
          , y = a[10]
          , z = a[11]
          , A = a[2]
          , B = a[5]
          , C = a[15]
          , D = a[7];
        e = "https://" + b + e + f + "." + g + c + l + d + m + t + q + u + "." + h + r + "/" + k + v + "/" + n + p + w + x + "/" + y + z + A + B + a[29] + "." + C + D + a[15];
    } else {
        "b" == b && (b = a[22],
        e = a[22],
        f = a[22],
        g = a[0],
        c = a[17],
        l = a[0],
        d = a[15],
        m = a[8],
        t = a[0],
        q = a[10],
        u = a[17],
        h = a[7],
        r = a[29],
        k = a[10],
        v = a[11],
        n = a[2],
        p = a[3],
        w = a[10],
        x = a[11],
        y = a[2],
        z = a[5],
        A = a[29],
        B = a[15],
        C = a[7],
        D = a[15],
        e = "https://" + b + e + f + "." + g + c + l + d + m + t + "." + q + u + "/" + h + r + "/" + k + v + n + p + "/" + w + x + y + z + A + "." + B + C + D);
    }
    return e;
}
